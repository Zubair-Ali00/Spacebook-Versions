{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useRoute } from '@react-navigation/native';\nimport SpHeader from \"../components/header\";\nimport SpPost from \"../components/post\";\nimport { getCurrentTimestamp } from 'react-native/Libraries/Utilities/createPerformanceLogger';\nimport { clickProps } from 'react-native-web/dist/cjs/modules/forwardedProps';\nimport EditPost from \"../components/editPost\";\nimport AddPost from \"../components/addPost\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  post: {\n    width: '90%',\n    backgroundColor: '#C0E2FB',\n    alignItems: 'center',\n    padding: 5,\n    borderRadius: 20,\n    top: 20,\n    marginBottom: 20,\n    elevation: 20,\n    shadowColor: '#52006A'\n  },\n  post1: {\n    flexDirection: 'row',\n    alignSelf: \"baseline\",\n    marginLeft: 10\n  },\n  image: {\n    width: 40,\n    height: 40,\n    backgroundColor: 'white',\n    borderRadius: 40,\n    alignSelf: 'flex-start'\n  },\n  info: {\n    marginLeft: 10\n  },\n  text: {\n    fontWeight: 'bold'\n  },\n  post2: {\n    alignSelf: 'baseline',\n    marginLeft: 20,\n    flexDirection: 'column',\n    marginBottom: 15,\n    marginTop: 15\n  },\n  post3: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: '#8DCACE',\n    paddingHorizontal: '10%',\n    paddingHorizontal: '10%',\n    alignSelf: 'center'\n  },\n  postUpdate: {\n    margin: 10\n  }\n});\n\nfunction GetPost(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    post_id: \"\",\n    text: \"\",\n    timestamp: getCurrentTimestamp(),\n    author: {\n      user_id: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\"\n    },\n    numLikes: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      post = _useState2[0],\n      setPost = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var route = useRoute();\n  var id = route.params.user;\n  var postt = route.params.post;\n  var token = route.params.token;\n  useEffect(function () {\n    var abortController = new AbortController();\n\n    var page = function page() {\n      var xhttp;\n      return _regeneratorRuntime.async(function page$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3333/api/1.0.0/user/' + id + '/post/' + postt, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'X-Authorization': token\n                }\n              }).then(function (response) {\n                return response.json();\n              }).then(function (text) {\n                setPost(text);\n              }).catch(function (res) {\n                console.log(res);\n              }));\n\n            case 2:\n              xhttp = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    page();\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [route]);\n\n  if (route.params.action != \"add\") {\n    return _jsx(EditPost, {\n      first_name: post.author.first_name,\n      last_name: post.author.last_name,\n      text: post.text,\n      token: token\n    });\n  } else {\n    return _jsx(View, {\n      style: styles.postUpdate,\n      children: _jsx(AddPost, {\n        first_name: \"My\",\n        last_name: \"Post\",\n        user: route.params.user,\n        token: token\n      })\n    });\n  }\n}\n\nexport default GetPost;","map":{"version":3,"sources":["/Users/blackbeats/Documents/TelegramWork/reactNative/spacebook/Pages/GetPost.js"],"names":["React","useEffect","useState","useRoute","SpHeader","SpPost","getCurrentTimestamp","clickProps","EditPost","AddPost","AsyncStorage","styles","StyleSheet","create","post","width","backgroundColor","alignItems","padding","borderRadius","top","marginBottom","elevation","shadowColor","post1","flexDirection","alignSelf","marginLeft","image","height","info","text","fontWeight","post2","marginTop","post3","button","borderWidth","borderStyle","borderColor","paddingHorizontal","postUpdate","margin","GetPost","navigation","post_id","timestamp","author","user_id","first_name","last_name","email","numLikes","setPost","setText","route","id","params","user","postt","token","abortController","AbortController","page","fetch","method","headers","then","response","json","catch","res","console","log","xhttp","cleanup","abort","action"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text, TextInput, View,Button, StyleSheet, Pressable } from 'react-native';\n\nimport {useRoute} from '@react-navigation/native'\n\nimport SpHeader from '../components/header'\nimport SpPost from '../components/post'\nimport { getCurrentTimestamp } from 'react-native/Libraries/Utilities/createPerformanceLogger';\nimport { clickProps } from 'react-native-web/dist/cjs/modules/forwardedProps';\nimport EditPost from '../components/editPost';\nimport AddPost from '../components/addPost';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst styles = StyleSheet.create({\n  post:{\n      width: '90%',\n      backgroundColor: '#C0E2FB',\n      alignItems: 'center',\n      padding: 5,\n      borderRadius: 20,\n      top: 20,\n      marginBottom: 20,\n      elevation: 20,\n      shadowColor: '#52006A',\n  },\n  post1:{\n      flexDirection: 'row',\n      alignSelf: \"baseline\", \n      marginLeft: 10, \n  },\n  image:{\n      width: 40,\n      height: 40,\n      backgroundColor: 'white',\n      borderRadius: 40,\n      alignSelf: 'flex-start'\n  },\n  info:{\n      marginLeft: 10,    \n  },\n  text: {\n      fontWeight: 'bold',\n  },\n  post2:{\n      alignSelf: 'baseline',\n      marginLeft: 20,\n      flexDirection: 'column',\n      marginBottom: 15,\n      marginTop: 15,\n  },\n  post3:{\n      flexDirection: 'row',        \n  },\n  button:{\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: '#8DCACE',\n    //boxSizing: 'border-box',\n    paddingHorizontal: '10%',\n    paddingHorizontal: '10%', \n    alignSelf: 'center'\n  },\n  postUpdate:{\n    margin: 10\n  }\n})\n\n\n\n\nfunction GetPost({navigation}) {\n  //const [info, setInfo] = useState({});\n\n  const [post,setPost] = useState({\n    post_id: \"\",\n    text: \"\",\n    timestamp: getCurrentTimestamp(),\n    author: {\n        user_id: \"\",\n        first_name: \"\",\n        last_name: \"\",\n        email: \"\"\n    },\n    numLikes: 0\n  });\n  const [text, setText] = useState(\"\");\n\n\n  const route = useRoute();\n\n  //console.log(\"Params are\" + route.params)\n  var id = route.params.user;\n\n  var postt = route.params.post;\n\n  var token = route.params.token;\n  //console.log(post)\n  //token = route.params.token;\n\n  //console.log(\"user is\" + id + \"post id\" + postt)\n  useEffect(() => {\n    const abortController = new AbortController();\n    const page = async () => {\n      const xhttp = await fetch('http://localhost:3333/api/1.0.0/user/'+id+'/post/'+postt, {\n                    method: 'GET',\n                    headers: {\n                      'Accept': 'application/json',\n                      'Content-Type': 'application/json',\n                      'X-Authorization': token,\n                    }\n                  })\n                  .then((response) => response.json())\n                  .then((text) => {                    \n                      setPost(text);                \n                      //console.log(post)\n                  })\n                  .catch(function (res){\n                    console.log(res)\n                  });\n      \n    }\n\n    page();\n\n    \n\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [route]);\n\n\n\n  \n\n  if (route.params.action != \"add\"){\n    return (\n        <EditPost\n          first_name={post.author.first_name}\n          last_name={post.author.last_name}\n          text={post.text}\n          token={token}\n        />\n    );\n  }else{\n    return (\n      <View style={styles.postUpdate}>\n      <AddPost \n        first_name=\"My\"\n        last_name=\"Post\"\n        user={route.params.user}\n        token={token}\n      />    \n      </View>  \n    );\n  }\n}\n\nexport default GetPost;"]},"metadata":{},"sourceType":"module"}